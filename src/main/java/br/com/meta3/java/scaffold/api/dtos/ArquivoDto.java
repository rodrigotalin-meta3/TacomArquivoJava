package br.com.meta3.java.scaffold.api.dtos;

import br.com.meta3.java.scaffold.domain.entities.Arquivo;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Null;
import jakarta.validation.constraints.Size;
import java.io.Serializable;

/**
 * API Data Transfer Object for Arquivo.
 *
 * Provides validation suitable for create/update endpoints using validation groups.
 *
 * TODO: (REVIEW) Using validation groups (Create / Update) to differentiate required
 * fields between POST (create) and PUT/PATCH (update). This keeps the DTO single
 * while allowing different validation rules per operation.
 */
public class ArquivoDto implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * Validation group for create (POST) operations.
     */
    public interface Create {
    }

    /**
     * Validation group for update (PUT) operations.
     */
    public interface Update {
    }

    // ID generated by the persistence layer. Must be null when creating.
    @Null(groups = Create.class)
    @NotNull(groups = Update.class)
    private Integer codigoarquivo;

    // Required when creating a new Arquivo.
    @NotBlank(groups = Create.class)
    @Size(max = 255)
    private String nomearquivo;

    // Numeric counters. Required on create; use Integer to allow partial updates (null).
    @NotNull(groups = Create.class)
    @Min(0)
    private Integer quantidaderegistro;

    @NotNull(groups = Create.class)
    @Min(0)
    private Integer aptos;

    @NotNull(groups = Create.class)
    @Min(0)
    private Integer semdocumento;

    @NotNull(groups = Create.class)
    @Min(0)
    private Integer comcodigosetps;

    @NotNull(groups = Create.class)
    @Min(0)
    private Integer comerro;

    // Optional textual fields.
    @Size(max = 10)
    private String anovigencia = "";

    @Size(max = 50)
    private String codigoescola = "";

    public ArquivoDto() {
    }

    // Convenience constructor for tests and mapping
    public ArquivoDto(Integer codigoarquivo,
                      String nomearquivo,
                      Integer quantidaderegistro,
                      Integer aptos,
                      Integer semdocumento,
                      Integer comcodigosetps,
                      Integer comerro,
                      String anovigencia,
                      String codigoescola) {
        this.codigoarquivo = codigoarquivo;
        this.nomearquivo = nomearquivo;
        this.quantidaderegistro = quantidaderegistro;
        this.aptos = aptos;
        this.semdocumento = semdocumento;
        this.comcodigosetps = comcodigosetps;
        this.comerro = comerro;
        this.anovigencia = anovigencia;
        this.codigoescola = codigoescola;
    }

    // Getters and setters

    public Integer getCodigoarquivo() {
        return codigoarquivo;
    }

    public void setCodigoarquivo(Integer codigoarquivo) {
        this.codigoarquivo = codigoarquivo;
    }

    public String getNomearquivo() {
        return nomearquivo;
    }

    public void setNomearquivo(String nomearquivo) {
        this.nomearquivo = nomearquivo;
    }

    public Integer getQuantidaderegistro() {
        return quantidaderegistro;
    }

    public void setQuantidaderegistro(Integer quantidaderegistro) {
        this.quantidaderegistro = quantidaderegistro;
    }

    public Integer getAptos() {
        return aptos;
    }

    public void setAptos(Integer aptos) {
        this.aptos = aptos;
    }

    public Integer getSemdocumento() {
        return semdocumento;
    }

    public void setSemdocumento(Integer semdocumento) {
        this.semdocumento = semdocumento;
    }

    public Integer getComcodigosetps() {
        return comcodigosetps;
    }

    public void setComcodigosetps(Integer comcodigosetps) {
        this.comcodigosetps = comcodigosetps;
    }

    public Integer getComerro() {
        return comerro;
    }

    public void setComerro(Integer comerro) {
        this.comerro = comerro;
    }

    public String getAnovigencia() {
        return anovigencia;
    }

    public void setAnovigencia(String anovigencia) {
        this.anovigencia = anovigencia;
    }

    public String getCodigoescola() {
        return codigoescola;
    }

    public void setCodigoescola(String codigoescola) {
        this.codigoescola = codigoescola;
    }

    /**
     * Map this DTO to the domain entity.
     *
     * Note: This method maps all fields. When performing partial updates you should
     * selectively copy non-null fields from the DTO to the existing entity.
     */
    public Arquivo toEntity() {
        Arquivo entity = new Arquivo();
        entity.setCodigoarquivo(this.codigoarquivo);
        entity.setNomearquivo(this.nomearquivo);
        entity.setQuantidaderegistro(this.quantidaderegistro);
        entity.setAptos(this.aptos);
        entity.setSemdocumento(this.semdocumento);
        entity.setComcodigosetps(this.comcodigosetps);
        entity.setComerro(this.comerro);
        entity.setAnovigencia(this.anovigencia);
        entity.setCodigoescola(this.codigoescola);
        return entity;
    }

    /**
     * Create a DTO from a domain entity.
     */
    public static ArquivoDto fromEntity(Arquivo entity) {
        if (entity == null) {
            return null;
        }
        return new ArquivoDto(
                entity.getCodigoarquivo(),
                entity.getNomearquivo(),
                entity.getQuantidaderegistro(),
                entity.getAptos(),
                entity.getSemdocumento(),
                entity.getComcodigosetps(),
                entity.getComerro(),
                entity.getAnovigencia(),
                entity.getCodigoescola()
        );
    }

    // TODO: (REVIEW) Consider adding builder helpers or using a mapping framework (e.g., MapStruct)
    // for more advanced mappings and partial update handling in the future.
}